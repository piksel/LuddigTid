#include "num2words.h"
#include "string.h"

static const char* const ONES[] = {
  "noll",
  "ett",
  "två",
  "tre",
  "fyra",
  "fem",
  "sex",
  "sju",
  "åtta",
  "nio"
};

static const char* const TEENS[] ={
  "",
  "elva",
  "tolv",
  "tretton",
  "fjorton",
  "femton",
  "sexton",
  "sjutton",
  "arton",
  "nitton"
};

static const char* const TENS[] = {
  "",
  "tio",
  "tjugo",
  "trettio",
  "fyrtio",
  "femtio",
  "sextio",
  "sjuttio",
  "åttio",
  "nittio"
};

//static const char* STR_OH_CLOCK = "prick";
//static const char* STR_NOON = "middag";
//static const char* STR_MIDNIGHT = "midnatt";
static const char* STR_QUARTER = "kvart";
static const char* STR_TO = "i";
static const char* STR_PAST = "över";
static const char* STR_HALF = "halv";
static const char* STR_AFTER = "över";

static size_t append_number(char* words, int num) {
  int tens_val = num / 10 % 10;
  int ones_val = num % 10;

  size_t len = 0;

  if (tens_val > 0) {
    if (tens_val == 1 && num != 10) {
      strcat(words, TEENS[ones_val]);
      return strlen(TEENS[ones_val]);
    }
    strcat(words, TENS[tens_val]);
    len += strlen(TENS[tens_val]);
    if (ones_val > 0) {
      strcat(words, "");
      len += 1;
    }
  }

  if (ones_val > 0 || num == 0) {
    strcat(words, ONES[ones_val]);
    len += strlen(ONES[ones_val]);
  }
  return len;
}

static size_t append_string(char* buffer, const size_t length, const char* str) {
  strncat(buffer, str, length);

  size_t written = strlen(str);
  return (length > written) ? written : length;
}

int fuzzy_time_to_words(int hours, int minutes, char* words, size_t length, char* words_bold, size_t length_bold) {
  int fuzzy_hours = hours;
  int fuzzy_minutes = ((minutes + 2) / 5) * 5;
  int rows = 1;

  // Handle hour & minute roll-over.
  if (fuzzy_minutes > 55) {
    fuzzy_minutes = 0;
    fuzzy_hours += 1;
    if (fuzzy_hours > 23) {
      fuzzy_hours = 0;
    }
  }

  size_t remaining = length;
  size_t remaining_bold = length_bold;
  memset(words, 0, length);
  memset(words_bold, 0, length_bold);

  if (fuzzy_minutes != 0 && (fuzzy_minutes >= 10 || fuzzy_minutes == 5 || fuzzy_hours == 0 || fuzzy_hours == 12)) {
    if (fuzzy_minutes == 15) {
      remaining -= append_string(words, remaining, STR_QUARTER);
      remaining -= append_string(words, remaining, "\n");
      remaining -= append_string(words, remaining, STR_AFTER);
      //remaining -= append_string(words, remaining, " ");
      rows = 3;

    } else if (fuzzy_minutes == 45) {
      remaining -= append_string(words, remaining, STR_QUARTER);
      remaining -= append_string(words, remaining, " ");
      remaining -= append_string(words, remaining, STR_TO);
      //remaining -= append_string(words, remaining, " ");
      rows = 2;
      fuzzy_hours = (fuzzy_hours + 1) % 24;

    } else if (fuzzy_minutes == 30) {
      remaining -= append_string(words, remaining, STR_HALF);
      //remaining -= append_string(words, remaining, " ");
      //remaining -= append_string(words, remaining, STR_PAST);
      //remaining -= append_string(words, remaining, " ");
      rows = 2;
      fuzzy_hours = (fuzzy_hours + 1) % 24;

    } else if (fuzzy_minutes == 25) {
      remaining -= append_number(words, 5);
      remaining -= append_string(words, remaining, " ");
      remaining -= append_string(words, remaining, STR_TO);
      remaining -= append_string(words, remaining, "\n");
      remaining -= append_string(words, remaining, STR_HALF);
      //remaining -= append_string(words, remaining, " ");
      //remaining -= append_string(words, remaining, STR_PAST);
      //remaining -= append_string(words, remaining, " ");
      rows = 3;
      fuzzy_hours = (fuzzy_hours + 1) % 24;

    } else if (fuzzy_minutes == 35) {
      remaining -= append_number(words, 5);
      remaining -= append_string(words, remaining, "\n");
      remaining -= append_string(words, remaining, STR_PAST);
      remaining -= append_string(words, remaining, "\n");
      remaining -= append_string(words, remaining, STR_HALF);
      //remaining -= append_string(words, remaining, " ");
      //remaining -= append_string(words, remaining, STR_PAST);
      //remaining -= append_string(words, remaining, " ");
      rows = 4;
      fuzzy_hours = (fuzzy_hours + 1) % 24;

    } else if (fuzzy_minutes < 30) {
      remaining -= append_number(words, fuzzy_minutes);
      remaining -= append_string(words, remaining, "\n");
      remaining -= append_string(words, remaining, STR_AFTER);
      //remaining -= append_string(words, remaining, " ");
      rows = 3;

    } else {
      remaining -= append_number(words, 60 - fuzzy_minutes);
      remaining -= append_string(words, remaining, " ");
      remaining -= append_string(words, remaining, STR_TO);
      //remaining -= append_string(words, remaining, " ");
      fuzzy_hours = (fuzzy_hours + 1) % 24;
      rows = 2;

    }
  }

/*
    if (fuzzy_hours == 0) {
      remaining -= append_string(words_bold, remaining, STR_MIDNIGHT);
    } else if (fuzzy_hours == 12) {
      remaining -= append_string(words_bold, remaining, STR_NOON);
    } else {
*/
      remaining_bold -= append_number(words_bold, fuzzy_hours % 12);
//    }
  
/*
  if (fuzzy_minutes == 0 && !(fuzzy_hours == 0 || fuzzy_hours == 12)) {
    remaining -= append_string(words, remaining, " ");
    remaining -= append_string(words, remaining, STR_OH_CLOCK);
  }
*/

  return rows;
}
